@startuml
'https://plantuml.com/class-diagram


package "Bases des objets" <<Frame>> {

    class Page {
        -title : String
        -author : String
        toHTML() : String
    }

    abstract class Tag {
        - text : String
        getText() : String
        setText(text : String) : void
        toHTML() : String
    }

    Tag <|-- Paragraph
    Tag <|-- Title
    Tag <|-- Link
    Tag <|-- Image

    Page -> "*" Tag : content
    Site -> "*" Page : pages

    class Site {
        -title : String
        -pages : Map<String, Page>
        add(Page p)
        remove(Page p)
        render(String name)
    }

    Image : toHTML(): String
    Link : toHTML(): String
    Title : toHTML(): String
    Paragraph : toHTML(): String

}

package "Composite - création de div dans des div" <<Frame>> {

    class Div2Col {

    }

    Tag <|--- Div2Col
    Tag "colA *" <-- Div2Col
    Tag "colB *" <-- Div2Col

    Div2Col : toHTML(): String

}

package "Decorator - ajout de style à tout Tag" <<Frame>> {

    abstract class StyleCSS
    Tag <|-- StyleCSS
    Tag <-- StyleCSS

    StyleCSS <|-- Colored
    StyleCSS <|-- Bolded
    StyleCSS <|-- Underligned

    Underligned : toHTML(): String
    Bolded : toHTML(): String
    Colored : toHTML(): String

}


package "Prototype - mise à dispo de templates" <<Frame>> {
    Page : clone()

    Registry --> "templates *" Page
    class Registry {
        add(String, Page)
        remove(String)
        get(String) : Page
    }

    Tag : {abstract} clone()
}
    note right of Tag::clone
      This method is brought by Prototype pattern
    end note

package "Builder - création 'simple' de templates" <<Frame>> {
      class PageBuilder {
        addParagraph()
        addLink()
        addTitle()
        addImage()
        build() : Page
      }

      PageBuilder ..> "<create>" Page
      PageBuilder -> Registry
      PageBuilder -> "inProgress" Page
}


package "Abstract factory" <<Frame>> {

    interface StyledTagFactory {
        createParagraph() : Paragraph
        createTitle(): Title
        createLink(): Link
        createImage(): Image
    }

    StyledTagFactory <|.. DraculaStyleFactory
    StyledTagFactory <|.. ModernStyleFactory
    StyledTagFactory <|.. SportStyleFactory

    class DraculaStyleFactory {
    createParagraph() : Paragraph
            createTitle(): Title
            createLink(): Link
            createImage(): Image
    }


     Colored <.. DraculaStyleFactory : "generates"
     Title <.. DraculaStyleFactory : "generates"

}

package "Visitor - exports sous d'autres formats" <<Frame>> {
    interface Rewriter {
        + accept(visitor : Visitor)
    }

    interface Visitor {
        + visitJSON(j : RJSON)
        + visitLaTex(l : RLaTex)
    }

    class RJSON {
        + accept(visitor : Visitor)
    }

    class RLaTex {
        + accept(visitor : Visitor)
    }

    class RewriterVisitor {
        + visitJSON(jr : RJSON)
        + visitLaTex(lr : RLaTex)
    }

    Rewriter <|.. RJSON    
    Rewriter <|.. RLaTex
    Visitor <.. Rewriter
    RJSON <.. Visitor
    RLaTex <.. Visitor
    Visitor <|.. RewriterVisitor

    Site ..> RewriterVisitor
    Site ..> Rewriter
}
/'

package "Chain of responsability - calculer cout hebergement" <<Frame>> {
    abstract Class Host{
        {abstract} computePrice(String name, Map<String, Page> pages) : int
    }
    Host <-- Host : next

    Class OVH{
        - name : String
        computePrice(String name, ...) : int
    }
    Class Amazon{
        - name : String
        computePrice(String name, ...) : int
    }
    Class Hebergeur3{
        - name : String
        computePrice(String name, ...) : int
    }

    Host <|-- OVH
    Host <|-- Amazon
    Host <|-- Hebergeur3

}
Client --> Site : wantsToHost
Host <- Client : usesToEstimateHostCost
'/


package "Strategy - calculer cout hebergement" <<frame>> {
    class PriceCalculator {
        setStrategy(Strategy)
        setSite(Site)
        calculatePrice(Site) : double
    }
    note right of PriceCalculator::setSite
      This method is useless if
      calculatePrice takes a site as param
      which is quiet the correct signature
    end note

    interface Strategy {
        calculate(Site) : double
    }

    class OVH {
        calculate(Site) : double
    }

    class HostB {
            calculate(Site) : double
        }
    PriceCalculator -> Strategy
    Strategy <|.. OVH
    Strategy <|.. HostB
    PriceCalculator --> Site

    "Composite - création de div dans des div" -[hidden]> "Strategy"
}



/'package "Proxy - log des ajouts de pages" {
    interface Siteable {
        add(p: Page)
        remove(p: Page)
        render(name : String)
    }

    abstract class Logger{
        add(p: Page)
        # {abstract} applyProxy(p: Page)
    }
    note left of Logger::add
          this.apply(p)
          this.proxyed.add(p)
        end note


    Logger <|-- FileLogger
    Logger <|-- ConsoleLogger

    Siteable <|.. Site
    Siteable <|.. Logger
    Logger -> Site : proxyed

    FileLogger : apply(p: Page)
    ConsoleLogger : apply(p: Page)
}'/
@enduml